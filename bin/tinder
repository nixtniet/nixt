#!/usr/bin/env python3
# This file is placed in the Public Domain.


"simulate clients"


import os
import random
import queue
import shutil
import sys
import termios
import threading
import time
import _thread


sys.path.insert(0, os.getcwd())


from nixt.client  import Client, Fleet, Output
from nixt.disk    import Workdir, setwd
from nixt.object  import Object, keys
from nixt.run     import STARTTIME, Event, Main, elapsed, launch, level, rlog


if os.path.exists("mods"):
    from mods import Commands, command, parse, table
    from mods import Main, Mods, getmod


Mods.path = "mods"
Workdir.wdr = ".test"


param = Object()
param.cmd = [""]
param.dis = [""]
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.fnd = ["log", "rss", "config", "todo", ""]
param.man = [""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.now = [""]
param.pwd = ["bla mekker", ""]
param.req = [""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.upt = [""]
param.ver = [""]


pre = Object()
pre.cfg = ["nick=mekker", ""]
pre.imp = ["testing/feeds.opml", ""]
pre.log = ["bla", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


post = Object()
post.exp = ['']
post.dne = ["hnrss", ""]
post.rem = ["hnrss", ""]


lap = 1
nrs = 1
nrcommand = 1
percall   = 1


events = queue.Queue()
ignore = [
    "dbg",
]
paylock = _thread.allocate_lock()
rand = random.SystemRandom()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def dosay(self, channel, txt):
        self.raw(txt)

    def raw(self, txt):
        if "v" in Main.opts:
            print(txt)


class Buffer(Output):


    def __init__(self):
        Output.__init__(self)
        self.register("command", command)

    def dosay(self, channel, txt):
        self.raw(txt)

    def raw(self, txt):
        if "v" in Main.opts:
            print(txt)


class Pool:

    clients = []
    lock = threading.RLock()
    nrcpu = 1
    nrlast = 0

    @staticmethod
    def add(clt):
        Pool.clients.append(clt)

    def init(cls, nr=None):
        Pool.nrcpu = nr or os.cpu_count
        for x in range(Pool.nrcpu*2):
            clt = cls()
            clt.start()
            Pool.add(clt)

    @staticmethod
    def put(evt):
        with Pool.lock:
            if Pool.nrlast >= Pool.nrcpu-1:
                Pool.nrlast = 0
            clt = Pool.clients[Pool.nrlast]
            clt.put(evt)
            Pool.nrlast += 1


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Main.name.upper()} since {tme}")
    print("loaded " + ",".join(sorted(dir(Commands.names))))


def consume(evts):
    while True:
        try:
            event = events.get()
            event.wait()
            if events.qsize() == 0:
                break
        except (KeyboardInterrupt, EOFError):
            os._exit(0)


def payload(cmds):
    with paylock:
        nmr = 0
        cmdz = sorted(keys(cmds))
        if "s" in Main.opts:
            rand.shuffle(cmdz)
        todo = []
        for cmd in cmdz:
            if cmd in ignore:
                continue
            examples = getattr(cmds, cmd)
            for example in examples:
                event = Event()
                event.txt = cmd + " " + example
                event.type = "command"
                todo.append(event)
        for event in todo:
            Pool.put(event)
            events.put(event)
            nmr += 1
        return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    global nrs
    global nrcommand
    parse(Main, " ".join(sys.argv[1:]))
    level("error")
    setwd(Main.name,'.test')
    table()
    for mod in getmod():
        if "Main" in dir(mod):
            mod.Main.debug = True
    nrcommand = 0
    if "v" in Main.opts:
        banner()
    if "f" not in Main.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    Workdir.skel()
    if "z" in Main.opts:
        nrcpu = os.cpu_count()
    else:
        nrcpu = 1
    Pool.init(Buffer, nrcpu)
    nrs = Main.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, pre))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, param))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, post))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    time.sleep(0.1)
    consume(events)
    Fleet.shutdown()
    

if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    nrevents = events.qsize()
    percall = (endtime-STARTTIME)/(nrcommand)
    if "v" in Main.opts:
        print(f"{nrevents} events left.")
        print(f"total: {lap} nrs: {nrs} cmds: {nrcommand} call: %.6fs" % percall)
    sys.exit() 
