#!/usr/bin/env python3
# This file is placed in the Public Domain.


"simulate clients"


import os
import random
import queue
import shutil
import sys
import termios
import threading
import time
import _thread


sys.path.insert(0, os.getcwd())


from nixt.clients import Client, Fleet, Output
from nixt.command import Commands, command, table
from nixt.methods import elapsed, parse
from nixt.objects import Object, keys
from nixt.persist import Workdir, skel
from nixt.runtime import Event, launch, level


CHECKSUM  = ""
NAME      = Workdir.name
STARTTIME = time.time()


Commands.mod   = "mods"
Commands.debug = True
Workdir.wdr    = ".test"


events  = queue.Queue()
paylock = _thread.allocate_lock()
rand    = random.SystemRandom()


param = Object()
param.cmd = [""]
param.dis = [""]
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.fnd = ["log", "rss", "config", "todo", ""]
param.man = [""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.now = [""]
param.pwd = ["bla mekker", ""]
param.req = [""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.upt = [""]
param.ver = [""]


pre = Object()
pre.cfg = ["nick=mekker", ""]
pre.imp = ["tests/feeds.opml", ""]
pre.log = ["bla", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


post = Object()
post.dne = ["hnrss", ""]
post.exp = ['']
post.rem = ["hnrss", ""]


class Config:

    "configuration"    

    debug    = False
    gets     = {}
    index    = None
    init     = ""
    level    = "warn"
    md5      = True
    moddir   = "mods"
    opts     = ""
    otxt     = ""
    sets     = {}
    verbose  = False
    version  = 410


class CLI(Client):

    "command line interface."

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def dosay(self, channel, txt):
        self.raw(txt)

    def raw(self, txt):
        if "v" in Config.opts:
            print(txt)


class Buffer(Output):

    "buffered output."

    def __init__(self):
        Output.__init__(self)
        self.register("command", command)

    def dosay(self, channel, txt):
        self.raw(txt)

    def raw(self, txt):
        if "v" in Config.opts:
            print(txt)


class Pool:

    "pool of clients."

    clients = []
    lock = threading.RLock()
    nrcpu = 1
    nrlast = 0

    @staticmethod
    def add(clt):
        "add client to pool."
        Pool.clients.append(clt)

    @staticmethod
    def init(clz, nr=None):
        "initialize client pool."
        Pool.nrcpu = nr or os.cpu_count()
        for _x in range(Pool.nrcpu):
            clt = clz()
            clt.start()
            Pool.add(clt)

    @staticmethod
    def put(evt):
        "dispatch to client."
        with Pool.lock:
            if Pool.nrlast >= Pool.nrcpu-1:
                Pool.nrlast = 0
            clt = Pool.clients[Pool.nrlast]
            clt.put(evt)
            Pool.nrlast += 1


def banner():
    "show start message."
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{NAME.upper()} {Config.version} TINDER since {tme} ({Config.level.upper()})")


def consume():
    "wait for all events."
    while True:
        try:
            event = events.get()
            event.wait()
            events.task_done()
        except (KeyboardInterrupt, EOFError):
            os._exit(0)


def payload(cmds):
    "create example events and run them."
    with paylock:
        nmr = 0
        cmdz = sorted(keys(cmds))
        if "s" in Config.opts:
            rand.shuffle(cmdz)
        todo = []
        for cmd in cmdz:
            examples = getattr(cmds, cmd)
            for example in examples:
                event = Event()
                event.txt = cmd + " " + example
                event.type = "command"
                todo.append(event)
        for event in todo:
            Pool.put(event)
            events.put(event)
            nmr += 1
        return nmr


def wrap(function):
    "wrap function and restore console on return."
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    res = None, None
    try:
        res = function()
    except (KeyboardInterrupt, EOFError):
        pass
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)
    return res


def main(): # pylint: disable=R0912
    "main script."
    nrcommand = 0
    parse(Config, " ".join(sys.argv[1:]))
    if "v" in Config.opts:
        banner()
    if "f" not in Config.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    level(Config.level)
    skel()
    table(CHECKSUM)
    nrs = Config.index or 1
    thrs = []
    if "z" in Config.opts:
        Pool.init(Buffer)
    else:
        Pool.init(Buffer, 1)
    for _nr in range(nrs):
        thrs.append(launch(payload, pre))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, param))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload,  post))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    #consume()
    #events.join()
    Fleet.shutdown()
    Fleet.wait()
    return nrs, nrcommand



if __name__ == "__main__":
    nrz, commandz = wrap(main)
    if nrz is None and commandz is None:
       os._exit(1)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    nrevents = events.qsize()
    percall = (endtime-STARTTIME)/(commandz)
    if "v" in Config.opts:
        print(f"{Pool.nrcpu} cpu's used")
        print(f"{nrevents} events left.")
        print(f"total: {lap} nrs: {nrz} cmds: {commandz} call: %.6fs" % percall)
    sys.exit()
