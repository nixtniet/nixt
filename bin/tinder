#!/usr/bin/env python3
# This file is placed in the Public Domain.


"simulate clients"


import os
import random
import queue
import shutil
import sys
import termios
import threading
import time
import _thread


sys.path.insert(0, os.getcwd())


from nixt.command import Commands, command, parse, table
from nixt.handler import Client, Event, Fleet, Output
from nixt.methods import elapsed, level
from nixt.objects import Object, keys
from nixt.persist import Workdir, skel
from nixt.runtime import launch


NAME = Workdir.name
STARTTIME = time.time()


Commands.mod = "mods"
Commands.debug = True
Workdir.wdr = ".test"


class Config:

    debug    = False
    gets     = {}
    index    = None
    init     = ""
    level    = "warn"
    md5      = True
    moddir   = "mods"
    opts     = ""
    otxt     = ""
    sets     = {}
    verbose  = False
    version  = 410


lap = 1
nrs = 1
nrcommand = 1
percall   = 1


events = queue.Queue()
ignore = [
    "dbg",
]
paylock = _thread.allocate_lock()


rand = random.SystemRandom()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def dosay(self, channel, txt):
        self.raw(txt)

    def raw(self, txt):
        if "v" in Config.opts:
            print(txt)


class Buffer(Output):


    def __init__(self):
        Output.__init__(self)
        self.register("command", command)

    def dosay(self, channel, txt):
        self.raw(txt)

    def raw(self, txt):
        if "v" in Config.opts:
            print(txt)


class Pool:

    clients = []
    lock = threading.RLock()
    nrcpu = 1
    nrlast = 0

    @staticmethod
    def add(clt):
        Pool.clients.append(clt)

    @staticmethod
    def init(clz, nr=None):
        Pool.nrcpu = nr or os.cpu_count()
        for x in range(Pool.nrcpu):
            clt = clz()
            clt.start()
            Pool.add(clt)

    @staticmethod
    def put(evt):
        with Pool.lock:
            if Pool.nrlast >= Pool.nrcpu-1:
                Pool.nrlast = 0
            clt = Pool.clients[Pool.nrlast]
            clt.put(evt)
            Pool.nrlast += 1


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{NAME.upper()} {Config.version} since {tme} ({Config.level.upper()})")


def consume(evts):
    while True:
        try:
            event = events.get()
            event.wait()
            events.task_done()
        except (KeyboardInterrupt, EOFError):
            os._exit(0)


def payload(cmds):
    with paylock:
        nmr = 0
        cmdz = sorted(keys(cmds))
        if "s" in Config.opts:
            rand.shuffle(cmdz)
        todo = []
        for cmd in cmdz:
            if cmd in ignore:
                continue
            examples = getattr(cmds, cmd)
            for example in examples:
                event = Event()
                event.txt = cmd + " " + example
                event.type = "command"
                todo.append(event)
        for event in todo:
            Pool.put(event)
            events.put(event)
            nmr += 1
        return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    global nrs
    global nrcommand
    parse(Config, " ".join(sys.argv[1:]))
    nrcommand = 0
    if "v" in Config.opts:
        banner()
    if "f" not in Config.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    level(Config.level)
    skel()
    table()
    nrs = Config.index or 1
    thrs = []
    if "z" in Config.opts:
        Pool.init(Buffer)
    else:
        Pool.init(Buffer, 1)
    for _nr in range(nrs):
        thrs.append(launch(payload, pre))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, param))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload,  post))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    launch(consume, events)
    events.join()
    Fleet.shutdown()
    Fleet.wait()


param = Object()
param.cmd = [""]
param.dis = [""]
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.fnd = ["log", "rss", "config", "todo", ""]
param.man = [""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.now = [""]
param.pwd = ["bla mekker", ""]
param.req = [""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.upt = [""]
param.ver = [""]


pre = Object()
pre.cfg = ["nick=mekker", ""]
pre.imp = ["testing/feeds.opml", ""]
pre.log = ["bla", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


post = Object()
post.dne = ["hnrss", ""]
post.exp = ['']
post.rem = ["hnrss", ""]


if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    nrevents = events.qsize()
    percall = (endtime-STARTTIME)/(nrcommand)
    if "v" in Config.opts:
        print(f"{Pool.nrcpu} cpu's used")
        print(f"{nrevents} events left.")
        print(f"total: {lap} nrs: {nrs} cmds: {nrcommand} call: %.6fs" % percall)
    sys.exit()
