#!/usr/bin/env python3
# This file is placed in the Public Domain.


"simulate clients"


import os
import random
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from nixt.client  import Client
from nixt.handler import Event
from nixt.fleet   import Fleet
from nixt.object  import Object, keys
from nixt.thread  import Errors, full, launch
from nixts.path   import Workdir, skel


from nixtm import elapsed, fmt, parse, spl
from nixtm import STARTTIME, Main, command, modules, settable


Main.debug  = True
Main.md5    = False
Workdir.wdr = ".test"


lap = 1
nrs = 1
nrcommand = 1
percall   = 1


events = []
ignore = "dbg,"
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dis = [""]
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.fnd = ["log", "rss", "config", "todo", ""]
param.man = [""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.now = [""]
param.pwd = ["bla mekker", ""]
param.req = [""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.upt = [""]
param.ver = [""]


pre = Object()
pre.cfg = ["nick=mekker", ""]
pre.imp = ["tests/feeds.opml", ""]
pre.log = ["bla", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


post = Object()
post.exp = ['']
post.dne = ["hnrss", ""]
post.rem = ["hnrss", ""]


rand = random.SystemRandom()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in Main.opts:
            print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Main.name.upper()} since {tme}")
    print("loaded " + ",".join(sorted(modules())))


def consume(evts):
    while True:
        done = []
        for event in evts:
            if "x" in Main.opts:
                if event._thr:
                    if event._thr.is_alive():
                        time.sleep(0.01)
                        continue
            event.wait()
            done.append(event)
        for todo in done:
            events.remove(todo)
        if len(events) == 0:
            break


def errors():
    for exc in Errors.errors:
        print(full(exc))


def payload(clts, cmds):
    nmr = 0
    cmdz = sorted(keys(cmds))
    if "s" in Main.opts:
        rand.shuffle(cmdz)
    for clt in clts:
        for cmd in cmdz:
            if cmd in spl(ignore):
                continue
            examples = getattr(cmds, cmd)
            for example in examples:
                event = Event()
                event.txt = cmd + " " + example
                event.type = "command"
                event.orig = repr(clt)
                events.append(event)
                clt.put(event)
                nmr += 1
    return nmr


def wrapped(func):
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    errors()


def wrap(func):
    import termios
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        wrapped(func)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)




def main():
    global nrs
    global nrcommand
    settable()
    parse(Main, " ".join(sys.argv[1:]))
    nrcommand = 0
    if "v" in Main.opts:
        banner()
    if "f" not in Main.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    if "x" in Main.opts:
        nrcpu = os.cpu_count()
    else:
        nrcpu = 1
    for x in range(nrcpu):
        clt = CLI()
        clt.start()
    clts = Fleet.all()
    nrs = Main.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clts, pre))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clts, param))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clts, post))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    consume(events)
    Fleet.shutdown()


if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrcommand)
    if "v" in Main.opts:
        print(f"total: {lap} nrs: {nrs} cmds: {nrcommand} call: %.6fs" % percall)
