#!/usr/bin/env python3


import inspect
import os
import pathlib
import sys
import time


sys.path.insert(0, os.getcwd())


from nixt.clients import Client, Fleet
from nixt.handler import Event
from nixt.objects import Default
from nixt.persist import Workdir, pidname, skel, types
from nixt.runtime import launch, level


STARTTIME = time.time()


import mods as MODS


def out(txt):
    print(txt)
    sys.stdout.flush()


class Main(Default):

    debug   = False
    gets    = Default()
    ignore  = ""
    init    = ""
    level   = "warn"
    name    = Default.__module__.split(".")[-2]
    opts    = Default()
    otxt    = ""
    sets    = Default()
    verbose = False
    version = 647


class Commands:

    cmds  = {}
    md5   = {}
    names = {}

    @staticmethod
    def add(func, mod=None):
        Commands.cmds[func.__name__] = func
        if mod:
            Commands.names[func.__name__] = mod.__name__.split(".")[-1]

    @staticmethod
    def get(cmd):
        return Commands.cmds.get(cmd, None)

    @staticmethod
    def scan(mod):
        for key, cmdz in inspect.getmembers(mod, inspect.isfunction):
            if key.startswith("cb"):
                continue
            if 'event' in cmdz.__code__.co_varnames:
                Commands.add(cmdz, mod)


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        out(txt.encode('utf-8', 'replace').decode("utf-8"))


class Console(CLI):

    def announce(self, txt):
        pass

    def callback(self, evt):
        super().callback(evt)
        evt.wait()

    def poll(self):
        evt = Event()
        evt.txt = input("> ")
        evt.type = "command"
        return evt


def command(evt):
    parse(evt)
    func = Commands.get(evt.cmd)
    if not func:
        evt.ready()
        return
    func(evt)
    Fleet.display(evt)
    evt.ready()


def inits(pkg, names):
    modz = []
    for name in sorted(spl(names)):
        mod = getattr(pkg, name, None)
        if not mod:
            continue
        if "init" in dir(mod):
            thr = launch(mod.init)
            modz.append((mod, thr))
    return modz


def parse(obj, txt=""):
    if txt == "":
        if "txt" in dir(obj):
            txt = obj.txt
        else:
            txt = ""
    args = []
    obj.args   = []
    obj.cmd    = ""
    obj.gets   = Default()
    obj.index  = None
    obj.mod    = ""
    obj.opts   = ""
    obj.result = {}
    obj.sets   = Default()
    obj.silent = Default()
    obj.txt    = txt
    obj.otxt   = obj.txt
    _nr = -1
    for spli in obj.otxt.split():
        if spli.startswith("-"):
            try:
                obj.index = int(spli[1:])
            except ValueError:
                obj.opts += spli[1:]
            continue
        if "-=" in spli:
            key, value = spli.split("-=", maxsplit=1)
            setattr(obj.silent, key, value)
            setattr(obj.gets, key, value)
            continue
        if "==" in spli:
            key, value = spli.split("==", maxsplit=1)
            setattr(obj.gets, key, value)
            continue
        if "=" in spli:
            key, value = spli.split("=", maxsplit=1)
            if key == "mod":
                if obj.mod:
                    obj.mod += f",{value}"
                else:
                    obj.mod = value
                continue
            setattr(obj.sets, key, value)
            continue
        _nr += 1
        if _nr == 0:
            obj.cmd = spli
            continue
        args.append(spli)
    if args:
        obj.args = args
        obj.txt  = obj.cmd or ""
        obj.rest = " ".join(obj.args)
        obj.txt  = obj.cmd + " " + obj.rest
    else:
        obj.txt = obj.cmd or ""


def scan(pkg):
    for modname in dir(pkg):
        if "__" in modname:
            continue
        mod = getattr(pkg, modname)
        Commands.scan(mod)


def elapsed(seconds, short=True):
    txt = ""
    nsec = float(seconds)
    if nsec < 1:
        return f"{nsec:.2f}s"
    yea = 365*24*60*60
    week = 7*24*60*60
    nday = 24*60*60
    hour = 60*60
    minute = 60
    yeas = int(nsec/yea)
    nsec -= yeas*yea
    weeks = int(nsec/week)
    nsec -= weeks*week
    nrdays = int(nsec/nday)
    nsec -= nrdays*nday
    hours = int(nsec/hour)
    nsec -= hours*hour
    minutes = int(nsec/minute)
    nsec -= int(minute*minutes)
    sec = int(nsec)
    if yeas:
        txt += f"{yeas}y"
    if weeks:
        nrdays += weeks * 7
    if nrdays:
        txt += f"{nrdays}d"
    if short and txt:
        return txt.strip()
    if hours:
        txt += f"{hours}h"
    if minutes:
        txt += f"{minutes}m"
    if sec:
        txt += f"{sec}s"
    txt = txt.strip()
    return txt


def spl(txt):
    try:
        result = txt.split(',')
    except (TypeError, ValueError):
        result = [txt, ]
    return [x for x in result if x]


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    out(f"{Main.name.upper()} {Main.version} since {tme} ({Main.level.upper()})")
    if None:
        out(f'loaded {".".join(dir(MODS))}')


def check(txt):
    args = sys.argv[1:]
    for arg in args:
        if not arg.startswith("-"):
            continue
        for char in txt:
            if char in arg:
                return True
    return False


import os
import random
import queue
import shutil
import sys
import termios
import time
import _thread


from nixt.clients import Client, Fleet
from nixt.handler import Event
from nixt.objects import Object, keys
from nixt.persist import Workdir, skel
from nixt.runtime import launch


try:
    import mods as MODS
except ModuleNotFoundError:
    MODS = None


Main.debug  = True
Main.md5    = False
Workdir.wdr = ".test"


path = MODS.__path__[0]


param = Object()
param.cmd = [""]
param.dis = [""]
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.fnd = ["log", "rss", "config", "todo", ""]
param.man = [""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.now = [""]
param.pwd = ["bla mekker", ""]
param.req = [""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.upt = [""]
param.ver = [""]


pre = Object()
pre.cfg = ["nick=mekker", ""]
pre.imp = ["tests/feeds.opml", ""]
pre.log = ["bla", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


post = Object()
post.exp = ['']
post.dne = ["hnrss", ""]
post.rem = ["hnrss", ""]


lap = 1
nrs = 1
nrcommand = 1
percall   = 1


events = queue.Queue()
ignore = "dbg,"
paylock = _thread.allocate_lock()


rand = random.SystemRandom()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in Main.opts:
            print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Main.name.upper()} since {tme}")
    print("loaded " + ",".join(sorted(dir(MODS))))


def consume(evts):
    done = []
    while True:
        event = events.get()
        event.wait()
        if events.qsize() == 0:
            break


def payload(clt, cmds):
    nmr = 0
    cmdz = sorted(keys(cmds))
    if "s" in Main.opts:
        rand.shuffle(cmdz)
    for cmd in cmdz:
        if cmd in spl(ignore):
            continue
        examples = getattr(cmds, cmd)
        for example in examples:
            event = Event()
            event.orig = repr(clt)
            event.txt = cmd + " " + example
            event.type = "command"
            events.put(event)
            clt.put(event)
            nmr += 1
    return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    global nrs
    global nrcommand
    parse(Main, " ".join(sys.argv[1:]))
    scan(MODS)
    nrcommand = 0
    if "v" in Main.opts:
        banner()
    if "f" not in Main.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = Main.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, pre))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, param))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, post))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    consume(events)
    #Fleet.shutdown()
    #Fleet.wait()


if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    nrevents = events.qsize()
    percall = (endtime-STARTTIME)/(nrcommand)
    if "v" in Main.opts:
        if nrevents:
            print(f"{nrevents} events left.")
        print(f"total: {lap} nrs: {nrs} cmds: {nrcommand} call: %.6fs" % percall)
