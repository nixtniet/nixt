#!/usr/bin/env python3
# This file is placed in the Public Domain.


"main"


import hashlib
import json
import logging
import os
import os.path
import pathlib
import sys
import time
import _thread


sys.path.insert(0, os.getcwd())


from nixt.client  import Client, Fleet
from nixt.disk    import Workdir, pidname, setwd
from nixt.modules import Commands, Main
from nixt.modules import command, getmod, mod, modules, parse, scan, table
from nixt.run     import Event, launch, level, rlog, spl


if os.path.exists("mods"):
    Main.path = "mods"


Main.ignore = "wsd,rst,udp,web"


checksum = "edf25c5109379f6fc38e11c94c5d4e51"


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        print(txt.encode('utf-8', 'replace').decode("utf-8"))


class Console(CLI):

    def announce(self, txt):
        pass

    def callback(self, event):
        super().callback(event)
        event.wait()

    def poll(self):
        evt = Event()
        evt.txt = input("> ")
        evt.type = "command"
        return evt


def banner():
    if "v" in Main.opts:
        tme = time.ctime(time.time()).replace("  ", " ")
        rlog("warn", f"{Main.name.upper()} {Main.version} since {tme} ({Main.level.upper()})")
        rlog("warn", f"loaded {",".join(modules())}")


def daemon(verbose=False):
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    pid2 = os.fork()
    if pid2 != 0:
        os._exit(0)
    if not verbose:
        with open('/dev/null', 'r', encoding="utf-8") as sis:
            os.dup2(sis.fileno(), sys.stdin.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as sos:
            os.dup2(sos.fileno(), sys.stdout.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as ses:
            os.dup2(ses.fileno(), sys.stderr.fileno())
    os.umask(0)
    os.chdir("/")
    os.nice(10)


def forever():
    while True:
        try:
            time.sleep(0.1)
        except (KeyboardInterrupt, EOFError):
            break


def md5sum(path):
    with open(path, "r", encoding="utf-8") as file:
        txt = file.read().encode("utf-8")
        return hashlib.md5(txt).hexdigest()


def inits(names):
    modz = []
    for name in spl(names):
        try:
            module = mod(name)
            if not module:
                continue
            if "init" in dir(module):
                thr = launch(module.init)
                modz.append((module, thr))
        except Exception as ex:
            logging.exception(ex)
            _thread.interrupt_main()
    return modz


def pidfile(filename):
    if os.path.exists(filename):
        os.unlink(filename)
    path2 = pathlib.Path(filename)
    path2.parent.mkdir(parents=True, exist_ok=True)
    with open(filename, "w", encoding="utf-8") as fds:
        fds.write(str(os.getpid()))


def privileges():
    import getpass
    import pwd
    pwnam2 = pwd.getpwnam(getpass.getuser())
    os.setgid(pwnam2.pw_gid)
    os.setuid(pwnam2.pw_uid)


"scripts"


def background():
    daemon("-v" in sys.argv)
    privileges()
    Main.level = Main.sets.get("level", Main.level or "warn")
    Main.path = Main.sets.get("path", Main.path or "mods")
    level(Main.level or "debug")
    setwd(Main.name)
    pidfile(Workdir.pidname(Main.name))
    table()
    Commands.add(ver)
    inits(Main.init or "irc,rss")
    forever()


def console():
    import readline # noqa: F401
    parse(Main, " ".join(sys.argv[1:]))
    Main.init = Main.sets.get("init", Main.init)
    Main.verbose = Main.sets.get("verbose", Main.verbose)
    Main.level = Main.sets.get("level", Main.level or "warn")
    Main.path = Main.sets.get("path", Main.path or "mods")
    level(Main.level)
    setwd(Main.name)
    banner()
    table()
    Commands.add(ver)
    for _mod, thr in inits(Main.init):
        if "w" in Main.opts:
            thr.join(30.0)
    csl = Console()
    csl.start(daemon=True)
    forever()


def control():
    if len(sys.argv) == 1:
        return
    parse(Main, " ".join(sys.argv[1:]))
    Main.path = Main.sets.get("path", Main.path or "mods")
    level(Main.level or "warn")
    setwd(Main.name)
    table()
    Commands.add(cmd)
    Commands.add(md5)
    Commands.add(srv)
    Commands.add(tbl)
    Commands.add(ver)
    csl = CLI()
    evt = Event()
    evt.orig = repr(csl)
    evt.type = "command"
    evt.txt = Main.otxt
    command(evt)
    evt.wait()


def service():
    Main.path = Main.sets.get("path", Main.path or "mods")
    level(Main.level or "warn")
    setwd(Main.name)
    banner()
    privileges()
    pidfile(pidname(Main.name))
    table()
    Commands.add(ver)
    inits(Main.init or "irc,rss")
    forever()


"commands"


def cmd(event):
    event.reply(",".join(sorted(Commands.names)))


def md5(event):
    tbl = mod("tbl")
    event.reply(md5sum(tbl.__file__))


def srv(event):
    import getpass
    name = getpass.getuser()
    event.reply(TXT % (Main.name.upper(), name, name, name, Main.name))


def tbl(event):
    if not check("f"):
        Commands.names = {}
    for module in getmod():
        scan(module)
    event.reply("# This file is placed in the Public Domain.")
    event.reply("")
    event.reply("")
    event.reply('"lookup tables"')
    event.reply("")
    event.reply("")
    event.reply(f"NAMES = {json.dumps(Commands.names, indent=4, sort_keys=True)}")


def ver(event):
    event.reply(str(Main.version))


"runtimne"


def check(txt):
    args = sys.argv[1:]
    for arg in args:
        if not arg.startswith("-"):
            continue
        for char in txt:
            if char in arg:
                return True
    return False


def wrapped(func):
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    Fleet.shutdown()


def wrap(func):
    import termios
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        wrapped(func)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)

def main():
    if check("a"):
        Main.init = ",".join(modules())
    if check("v"):
        Main.opts["v"] = True
    if check("c"):
        wrap(console)
    elif check("d"):
        background()
    elif check("s"):
        wrapped(service)
    else:
        wrapped(control)


TXT = """[Unit]
Description=%s
After=network-online.target

[Service]
Type=simple
User=%s
Group=%s
ExecStart=/home/%s/.local/bin/%s -s

[Install]
WantedBy=multi-user.target"""


if __name__ == "__main__":
    main()
