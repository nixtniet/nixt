#!/usr/bin/env python3
# This file is placed in the Public Domain.


"main program"


import json
import logging
import os
import os.path
import pathlib
import sys
import time
import _thread


sys.path.insert(0, os.getcwd())


from nixt.brokers import Fleet
from nixt.clients import Client
from nixt.command import Commands, command, scanner, table
from nixt.configs import Config
from nixt.methods import parse
from nixt.handler import Event
from nixt.objects import update
from nixt.package import Mods, getmod, modules
from nixt.runtime import main
from nixt.threads import launch, level
from nixt.utility import forever, md5sum, spl
from nixt.workdir import Workdir, pidname, setwd


CHECKSUM = "9488d1cbdc265952c77dd1cd75a4e78f"
CHECKSUM = ""
NAME = Workdir.name


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def announce(self, txt):
        self.raw(txt)

    def raw(self, txt):
        out(txt.encode('utf-8', 'replace').decode("utf-8"))


class Console(CLI):

    def announce(self, txt):
        pass

    def callback(self, event):
        if not event.txt:
            return
        super().callback(event)
        event.wait()

    def poll(self):
        evt = Event()
        evt.txt = input("> ")
        evt.type = "command"
        return evt


def cmd(event):
    event.reply(",".join(sorted(Commands.names)))


def ver(event):
    event.reply(f"{NAME.upper()} {Config.version}")


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    out(f"{NAME.upper()} {Config.version} since {tme} ({Config.level.upper()})")


def check(txt):
    args = sys.argv[1:]
    for arg in args:
        if not arg.startswith("-"):
            continue
        for char in txt:
            if char in arg:
                return True
    return False


def out(txt):
    print(txt)
    sys.stdout.flush()


if __name__ == "__main__":
    main()
